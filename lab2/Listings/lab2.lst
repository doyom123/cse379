


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             LAB2, CODE, READWRITE
    2 00000000                 EXPORT           div_and_mod
    3 00000000         
    4 00000000         div_and_mod
    5 00000000 E92D5FFC        STMFD            r13!, {r2-r12, r14}
    6 00000004         
    7 00000004         ; Your code for the signed division/mod routine goes her
                       e.  
    8 00000004         ; The dividend is passed in r0 and the divisor in r1.
    9 00000004         ; The quotient is returned in r0 and the remainder in r1
                       . 
   10 00000004         
   11 00000004         ; r0 = dividend
   12 00000004         ; r1 = divisor
   13 00000004         ; r2 = counter
   14 00000004         ; r3 = quotient
   15 00000004         ; r4 = remainder
   16 00000004         ; r5 = dividend sign
   17 00000004         ; r6 = divisor sign
   18 00000004         ; r7 = r5 XOR r6
   19 00000004         ; RETURN r0 = quotient
   20 00000004         ;    r1 = remainder
   21 00000004         
   22 00000004         ; check sign of dividend
   23 00000004 E3500000        CMP              r0, #0
   24 00000008 E3A05000        MOV              r5, #0
   25 0000000C 43A05001        MOVMI            r5, #1
   26 00000010         ; if dividend < 0, convert to two's comp
   27 00000010 41E00000        MVNMI            r0, r0
   28 00000014 42800001        ADDMI            r0, r0, #1
   29 00000018         
   30 00000018         ; check sign of divisor
   31 00000018 E3510000        CMP              r1, #0
   32 0000001C E3A06000        MOV              r6, #0
   33 00000020 43A06001        MOVMI            r6, #1
   34 00000024         ; if divisor < 0, convert to two's comp
   35 00000024 41E01001        MVNMI            r1, r1
   36 00000028 42811001        ADDMI            r1, r1, #1
   37 0000002C         
   38 0000002C E3A0200F        MOV              r2, #15     ; Init counter to 1
                                                            5
   39 00000030 E3A03000        MOV              r3, #0      ; Init quotient to 
                                                            0
   40 00000034 E1A01781        LSL              r1, r1, #15 ; lsl divisor by 15
                                                            
   41 00000038 E2804000        ADD              r4, r0, #0  ; Set remainder to 
                                                            dividend
   42 0000003C         
   43 0000003C         loop
   44 0000003C E0544001        SUBS             r4, r4, r1  ; rem = rem - divis
                                                            
   45 00000040         
   46 00000040         ; if(remainder < 0)
   47 00000040 B0844001        ADDLT            r4, r4, r1  ; rem = rem + divis
                                                            
   48 00000044 B1A03083        LSLLT            r3, #1      ; lsl quotient
   49 00000048         ; else
   50 00000048 A1A03083        LSLGE            r3, #1      ; lsl quotient
   51 0000004C A3833001        ORRGE            r3, r3, #1  ; set LSB of quot =



ARM Macro Assembler    Page 2 


                                                             1
   52 00000050         
   53 00000050 E1A010A1        LSR              r1, r1, #1  ; right shift divis
                                                            
   54 00000054 E2522001        SUBS             r2, r2, #1  ; decrement counter
                                                            
   55 00000058 5AFFFFF7        BPL              loop        ; branch if count >
                                                            = 0
   56 0000005C         
   57 0000005C E2830000        ADD              r0, r3, #0  ; set quot to r0
   58 00000060 E2841000        ADD              r1, r4, #0  ; set remain to r1
   59 00000064         
   60 00000064 E0257006        EOR              r7, r5, r6
   61 00000068 E3570001        CMP              r7, #1
   62 0000006C         ; if dvnd != dvsr, convert answer to two's comp
   63 0000006C 01E00000        MVNEQ            r0, r0
   64 00000070 02800001        ADDEQ            r0, r0, #1
   65 00000074         
   66 00000074 E8BD5FFC        LDMFD            r13!, {r2-r12, r14}
   67 00000078 E12FFF1E        BX               lr          ; Return to the C p
                                                            rogram 
   68 0000007C         
   69 0000007C         
   70 0000007C                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\lab2.d -o.\objects\lab2.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMS
IS\Include -IC:\Keil_v5\ARM\Inc\Philips --predefine="__EVAL SETA 1" --predefine
="__UVISION_VERSION SETA 522" --list=.\listings\lab2.lst lab2.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

LAB2 00000000

Symbol: LAB2
   Definitions
      At line 1 in file lab2.s
   Uses
      None
Comment: LAB2 unused
div_and_mod 00000000

Symbol: div_and_mod
   Definitions
      At line 4 in file lab2.s
   Uses
      At line 2 in file lab2.s
Comment: div_and_mod used once
loop 0000003C

Symbol: loop
   Definitions
      At line 43 in file lab2.s
   Uses
      At line 55 in file lab2.s
Comment: loop used once
3 symbols
335 symbols in table
