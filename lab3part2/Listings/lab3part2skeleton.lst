


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             lib, CODE, READWRITE
    2 00000000                 EXPORT           lab3
    3 00000000                 EXPORT           pin_connect_block_setup_for_uar
t0
    4 00000000         
    5 00000000         
    6 00000000 00000014 
                       U0LSR   EQU              0x14        ; UART0 Line Status
                                                             Register
    7 00000000 0000000C 
                       U0LCR   EQU              0x0C        ; UART0 Line Contro
                                                            l Register
    8 00000000 E000C000 
                       U0BA    EQU              0xE000C000  ; UART0 Base Addres
                                                            s
    9 00000000         ; You'll want to define more constants to make your code
                        easier 
   10 00000000         ; to read and debug
   11 00000000         
   12 00000000         ; Memory allocated for user-entered strings
   13 00000000 75 73 65 
              72 2D 65 
              6E 74 65 
              72 65 64 
              20 73 74 
              72 69 6E 
              67 00    buff    =                "user-entered string", 0 ; memo
                                                            ry for user entered
                                                             string
   14 00000014 45 6E 74 
              65 72 20 
              61 20 6E 
              75 6D 62 
              65 72 3A 
              20 20 00 prompt  =                "Enter a number:  ",0
   15 00000026         
   16 00000026         ; Additional strings may be defined here
   17 00000026 45 6E 74 
              65 72 20 
              61 20 64 
              69 76 69 
              73 6F 72 
              3A 20 00 prompt_divisor
                               =                "Enter a divisor: ", 0
   18 00000038 45 6E 74 
              65 72 20 
              61 20 64 
              69 76 69 
              64 65 6E 
              64 3A 20 
              00       prompt_dividen
                               =                "Enter a dividend: ", 0
   19 0000004B 51 75 6F 
              74 69 65 
              6E 74 20 
              3D 20 00 response_quotient
                               =                "Quotient = ", 0
   20 00000057 52 65 6D 
              61 69 6E 



ARM Macro Assembler    Page 2 


              64 65 72 
              20 3D 20 
              00       response_remainder
                               =                "Remainder = ", 0
   21 00000064                 ALIGN
   22 00000064         
   23 00000064         
   24 00000064         
   25 00000064         lab3
   26 00000064 E92D4000        STMFD            SP!,{lr}    ; Store register lr
                                                             on stack
   27 00000068         ;LDR  r4, =buff
   28 00000068         ;BL   read_string
   29 00000068 E59F40B4        LDR              r4, =buff
   30 0000006C EB00000A        BL               output_string
   31 00000070 E8BD4000        LDMFD            sp!, {lr}
   32 00000074 E12FFF1E        BX               lr
   33 00000078         
   34 00000078         read_string                          ; base address of s
                                                            tring passed into r
                                                            4
   35 00000078 E92D4000        STMFD            SP!, {lr}   ; Store register lr
                                                             on stack
   36 0000007C         rs_loop
   37 0000007C EB00000E        BL               read_character
   38 00000080 E4C40001        STRB             r0, [r4], #1 ; store char into 
                                                            [r4], increment ind
                                                            ex
   39 00000084         
   40 00000084 E350000D        CMP              r0, #0x0D   ; check if char CR
   41 00000088 1AFFFFFB        BNE              rs_loop     ; loop if char != C
                                                            R
   42 0000008C E3A05000        MOV              r5, #0
   43 00000090 E5645001        STRB             r5, [r4, #-1]! ; decrement buff
                                                             index, then append
                                                             NULL char
   44 00000094         
   45 00000094 E8BD4000        LDMFD            sp!, {lr}
   46 00000098 E12FFF1E        BX               lr
   47 0000009C         
   48 0000009C         output_string                        ; base address of s
                                                            tring passed into r
                                                            4
   49 0000009C E92D4000        STMFD            SP!, {lr}
   50 000000A0         os_loop
   51 000000A0 E4D40001        LDRB             r0, [r4], #1 ; char loaded into
                                                             r0, r4 post-indexe
                                                            d base updated 
   52 000000A4 E59F107C        LDR              r1, =U0BA   ; set r1 to UART0 B
                                                            ase Address
   53 000000A8         ;STRB  r0, [r1]    ; Store byte into UART0 Base Address
   54 000000A8 EB00000C        BL               output_character ; output char 
                                                            in r0 
   55 000000AC E3500000        CMP              r0, #0      ; check if char is 
                                                            0
   56 000000B0 1AFFFFFA        BNE              os_loop     ; loop if char != 0
                                                            
   57 000000B4         
   58 000000B4 E8BD4000        LDMFD            sp!, {lr}



ARM Macro Assembler    Page 3 


   59 000000B8 E12FFF1E        BX               lr
   60 000000BC         
   61 000000BC         
   62 000000BC         read_character                       ; Read Data
   63 000000BC E92D4000        STMFD            SP!,{lr}    ; Store register lr
                                                             on stack
   64 000000C0 E59F0060        LDR              r0, =0xE000C000 ; Load UART0 Ba
                                                            se Address
   65 000000C4         rstart
   66 000000C4 E5D01014        LDRB             r1, [r0, #U0LSR] ; Load Status 
                                                            Register Addresss
   67 000000C8         ;LDRB r4, [r1]  ; Load Status Register into r4
   68 000000C8 E2112001        ANDS             r2, r1, #1  ; Test RDR in Statu
                                                            s Register
   69 000000CC 0AFFFFFC        BEQ              rstart      ; if RDR == 0 -> rs
                                                            tart
   70 000000D0 E5D03000        LDRB             r3, [r0]    ; else Read byte fr
                                                            om receive register
                                                            
   71 000000D4 E1A00003        MOV              r0, r3      ; Return char in r0
                                                            
   72 000000D8 E8BD4000        LDMFD            sp!, {lr}
   73 000000DC E12FFF1E        BX               lr
   74 000000E0         
   75 000000E0         output_character                     ; char passed in th
                                                            rough r0
   76 000000E0 E92D4000        STMFD            SP!,{lr}    ; Store register lr
                                                             on stack
   77 000000E4 E1A03000        MOV              r3, r0      ; Store char argume
                                                            nt into r3
   78 000000E8 E59F0038        LDR              r0, =0xE000C000 ; Load UART0 Ba
                                                            se Address
   79 000000EC         tstart
   80 000000EC E5D01014        LDRB             r1, [r0, #U0LSR] ; Load Status 
                                                            Register Addresss
   81 000000F0         ;LDRB r4, [r1]    ; Load Status Register into r4
   82 000000F0 E2112020        ANDS             r2, r1, #32 ; test THRE in Stat
                                                            us Register
   83 000000F4 0AFFFFFC        BEQ              tstart      ; if THRE == 0 -> t
                                                            start
   84 000000F8 E5C03000        STRB             r3, [r0]    ; else Store byte i
                                                            n transmit register
                                                            
   85 000000FC E8BD4000        LDMFD            sp!, {lr}
   86 00000100 E12FFF1E        BX               lr
   87 00000104         
   88 00000104         
   89 00000104         pin_connect_block_setup_for_uart0
   90 00000104 E92D4003        STMFD            sp!, {r0, r1, lr}
   91 00000108 E59F001C        LDR              r0, =0xE002C000 ; PINSEL0
   92 0000010C E5901000        LDR              r1, [r0]
   93 00000110 E3811005        ORR              r1, r1, #5
   94 00000114 E3C1100A        BIC              r1, r1, #0xA
   95 00000118 E5801000        STR              r1, [r0]
   96 0000011C E8BD4003        LDMFD            sp!, {r0, r1, lr}
   97 00000120 E12FFF1E        BX               lr
   98 00000124         
   99 00000124         
  100 00000124         



ARM Macro Assembler    Page 4 


  101 00000124                 END
              00000000 
              E000C000 
              E002C000 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\lab3part2skeleton.d -o.\objects\lab3part2skeleton.o -IC:\Keil_v5\ARM\RV3
1\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips --predefine="
__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 522" --list=.\listings\lab3p
art2skeleton.lst lab3part2skeleton.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

buff 00000000

Symbol: buff
   Definitions
      At line 13 in file lab3part2skeleton.s
   Uses
      At line 29 in file lab3part2skeleton.s
Comment: buff used once
lab3 00000064

Symbol: lab3
   Definitions
      At line 25 in file lab3part2skeleton.s
   Uses
      At line 2 in file lab3part2skeleton.s
Comment: lab3 used once
lib 00000000

Symbol: lib
   Definitions
      At line 1 in file lab3part2skeleton.s
   Uses
      None
Comment: lib unused
os_loop 000000A0

Symbol: os_loop
   Definitions
      At line 50 in file lab3part2skeleton.s
   Uses
      At line 56 in file lab3part2skeleton.s
Comment: os_loop used once
output_character 000000E0

Symbol: output_character
   Definitions
      At line 75 in file lab3part2skeleton.s
   Uses
      At line 54 in file lab3part2skeleton.s
Comment: output_character used once
output_string 0000009C

Symbol: output_string
   Definitions
      At line 48 in file lab3part2skeleton.s
   Uses
      At line 30 in file lab3part2skeleton.s
Comment: output_string used once
pin_connect_block_setup_for_uart0 00000104

Symbol: pin_connect_block_setup_for_uart0
   Definitions
      At line 89 in file lab3part2skeleton.s
   Uses
      At line 3 in file lab3part2skeleton.s
Comment: pin_connect_block_setup_for_uart0 used once
prompt 00000014

Symbol: prompt



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 14 in file lab3part2skeleton.s
   Uses
      None
Comment: prompt unused
prompt_dividen 00000038

Symbol: prompt_dividen
   Definitions
      At line 18 in file lab3part2skeleton.s
   Uses
      None
Comment: prompt_dividen unused
prompt_divisor 00000026

Symbol: prompt_divisor
   Definitions
      At line 17 in file lab3part2skeleton.s
   Uses
      None
Comment: prompt_divisor unused
read_character 000000BC

Symbol: read_character
   Definitions
      At line 62 in file lab3part2skeleton.s
   Uses
      At line 37 in file lab3part2skeleton.s
Comment: read_character used once
read_string 00000078

Symbol: read_string
   Definitions
      At line 34 in file lab3part2skeleton.s
   Uses
      None
Comment: read_string unused
response_quotient 0000004B

Symbol: response_quotient
   Definitions
      At line 19 in file lab3part2skeleton.s
   Uses
      None
Comment: response_quotient unused
response_remainder 00000057

Symbol: response_remainder
   Definitions
      At line 20 in file lab3part2skeleton.s
   Uses
      None
Comment: response_remainder unused
rs_loop 0000007C

Symbol: rs_loop
   Definitions
      At line 36 in file lab3part2skeleton.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 41 in file lab3part2skeleton.s
Comment: rs_loop used once
rstart 000000C4

Symbol: rstart
   Definitions
      At line 65 in file lab3part2skeleton.s
   Uses
      At line 69 in file lab3part2skeleton.s
Comment: rstart used once
tstart 000000EC

Symbol: tstart
   Definitions
      At line 79 in file lab3part2skeleton.s
   Uses
      At line 83 in file lab3part2skeleton.s
Comment: tstart used once
17 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

U0BA E000C000

Symbol: U0BA
   Definitions
      At line 8 in file lab3part2skeleton.s
   Uses
      At line 52 in file lab3part2skeleton.s
Comment: U0BA used once
U0LCR 0000000C

Symbol: U0LCR
   Definitions
      At line 7 in file lab3part2skeleton.s
   Uses
      None
Comment: U0LCR unused
U0LSR 00000014

Symbol: U0LSR
   Definitions
      At line 6 in file lab3part2skeleton.s
   Uses
      At line 66 in file lab3part2skeleton.s
      At line 80 in file lab3part2skeleton.s

3 symbols
354 symbols in table
